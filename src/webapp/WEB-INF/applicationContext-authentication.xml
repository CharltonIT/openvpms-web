<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                           http://www.springframework.org/schema/security
                           http://www.springframework.org/schema/security/spring-security-3.0.xsd">

    <!-- ================================================================== -->
    <!--                       USER SERVICE DEFINITIONS                   = -->
    <!-- ================================================================== -->

    <!--  The User DAO bean -->
    <bean id="userDao"
          class="org.openvpms.component.business.dao.hibernate.im.security.UserDAOHibernate">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- The User Details service -->
    <bean id="userService"
          class="org.openvpms.component.business.service.security.UserService">
        <constructor-arg index="0">
            <ref local="userDao"/>
        </constructor-arg>
    </bean>

    <!-- ================================================================== -->
    <!--                            FILTER CHAIN                            -->
    <!-- ================================================================== -->

    <bean id="springSecurityFilterChain" class="org.springframework.security.web.FilterChainProxy">
        <security:filter-chain-map path-type="ant">
            <security:filter-chain pattern="/esci/**"
                                   filters="esciChannelProcessingFilter,
                                            securityContextPersistenceFilterWithASCFalse,
                                            esciBasicAuthenticationFilter,
                                            esciExceptionTranslationFilter,
                                            esciFilterSecurityInterceptor"/>
            <security:filter-chain pattern="/**"
                                   filters="securityContextPersistenceFilter,
                                            echoExceptionTranslationFilter,
                                            echoAuthenticationFilter,
                                            anonymousAuthenticationFilter,
                                            echoFilterSecurityInterceptor"/>
        </security:filter-chain-map>
    </bean>

    <bean id="securityContextPersistenceFilter"
          class="org.springframework.security.web.context.SecurityContextPersistenceFilter">
    </bean>

    <!-- security context persistence filter, with allowSessionCreation set false. Use for web services -->
    <bean id="securityContextPersistenceFilterWithASCFalse"
          class="org.springframework.security.web.context.SecurityContextPersistenceFilter">
        <property name="securityContextRepository">
            <bean class="org.springframework.security.web.context.HttpSessionSecurityContextRepository">
                <property name="allowSessionCreation" value="false"/>
            </bean>
        </property>
    </bean>

    <bean id="anonymousAuthenticationFilter"
          class="org.springframework.security.web.authentication.AnonymousAuthenticationFilter">
        <property name="key" value="foobar"/>
        <property name="userAttribute" value="anonymousUser,ROLE_ANONYMOUS"/>
    </bean>

    <bean id="anonymousAuthenticationProvider"
          class="org.springframework.security.authentication.AnonymousAuthenticationProvider">
        <property name="key" value="foobar"/>
    </bean>

    <!-- ================================================================== -->
    <!--                            ECHO FILTER CHAIN                       -->
    <!-- ================================================================== -->

    <bean id="echoExceptionTranslationFilter"
          class="org.springframework.security.web.access.ExceptionTranslationFilter">
        <property name="authenticationEntryPoint" ref="echoAuthenticationEntryPoint"/>
    </bean>

    <!--security:http entry-point-ref="echoAuthenticationEntryPoint" >
        <security:intercept-url pattern="/login*" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <security:intercept-url pattern="/login/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY"/>
        ?commented<security:session-management invalid-session-url="/login"/>
        ?commented<security:custom-filter before="FORM_LOGIN_FILTER" ref="skipLoginFilter"/>
        <security:custom-filter position="FORM_LOGIN_FILTER" ref="authenticationFilter"/>
    </security:http-->


    <bean id="echoAuthenticationEntryPoint" class="org.openvpms.web.servlet.EchoAuthenticationEntryPoint">
        <property name="loginFormUrl" value="/login"/>
    </bean>

    <bean id="echoAuthenticationFilter"
          class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
        <property name="postOnly" value="false"/>
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="authenticationSuccessHandler" ref="echoAuthenticationSuccessHandler"/>
        <property name="filterProcessesUrl" value="/j_spring_security_check"/>
    </bean>

    <bean id="echoAuthenticationSuccessHandler"
          class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
        <property name="alwaysUseDefaultTargetUrl" value="true"/>
        <property name="defaultTargetUrl" value="/app"/>
    </bean>

    <bean id="echoFilterSecurityInterceptor"
          class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="accessDecisionManager" ref="authenticatedVoterAccessDecisionManager"/>
        <property name="securityMetadataSource">
            <security:filter-security-metadata-source path-type="ant">
                <security:intercept-url pattern="/j_spring_security_check" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
                <security:intercept-url pattern="/login*" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
                <security:intercept-url pattern="/login/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
                <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY"/>
            </security:filter-security-metadata-source>
        </property>
    </bean>

    <bean id="skipLoginFilter" class="org.openvpms.web.servlet.SkipLoginFilter"/>

    <!-- This bean automatically receives AuthenticationEvent messages from Spring Security  -->
    <bean id="loggerListener" class="org.springframework.security.authentication.event.LoggerListener"/>

    <!-- ================================================================== -->
    <!--                            ESCI FILTER CHAIN                       -->
    <!-- ================================================================== -->

    <!-- channel processing filter for ESCI that ensures all requests go over https -->
    <bean id="esciChannelProcessingFilter" class="org.openvpms.web.servlet.ChannelProcessingFilter">
        <property name="secure" value="${openvpms.webservice.secure}"/>
    </bean>

    <!--bean id="esciChannelProcessingFilter2"
          class="org.springframework.security.web.access.channel.ChannelProcessingFilter">
        <property name="channelDecisionManager">
            <bean class="org.springframework.security.web.access.channel.ChannelDecisionManagerImpl">
                <property name="channelProcessors">
                    <list>
                        <bean class="org.springframework.security.web.access.channel.SecureChannelProcessor"/>
                    </list>
                </property>
            </bean>
        </property>
        <property name="securityMetadataSource">
            <security:filter-security-metadata-source path-type="ant">
                <security:intercept-url pattern="/**"/>
            </security:filter-security-metadata-source>
        </property>
    </bean-->

    <!-- BASIC authentication filter for ESCI. Only enable if using https -->
    <bean id="esciBasicAuthenticationFilter"
          class="org.springframework.security.web.authentication.www.BasicAuthenticationFilter">
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="authenticationEntryPoint" ref="esciBasicAuthenticationPoint"/>
    </bean>

    <bean name="esciBasicAuthenticationPoint"
          class="org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint">
        <property name="realmName" value="ESCI"/>
    </bean>

    <!-- DIGEST authentication filter for ESCI. Use this if using http instead of https                         -->
    <!-- If using digest authentication, then the 'requires-channel' attribute of esciFilterSecurityInterceptor -->
    <!-- can be set to 'http'                                                                                   -->
    <!-- bean id="esciDigestAuthenticationFilter"
          class="org.springframework.security.web.authentication.www.DigestAuthenticationFilter">
        <property name="userDetailsService" ref="userService"/>
        <property name="authenticationEntryPoint" ref="esciDigestAuthenticationEntryPoint"/>
    </bean>

    <bean id="esciDigestAuthenticationEntryPoint"
          class="org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint">
        <property name="realmName" value="ESCI"/>
        <property name="key" value="acegi"/>
    </bean -->

    <bean id="esciExceptionTranslationFilter"
          class="org.springframework.security.web.access.ExceptionTranslationFilter">
        <property name="authenticationEntryPoint" ref="esciBasicAuthenticationPoint"/>
    </bean>

    <bean id="esciFilterSecurityInterceptor"
          class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="accessDecisionManager" ref="authenticatedVoterAccessDecisionManager"/>
        <property name="securityMetadataSource">
            <security:filter-security-metadata-source path-type="ant">
                <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY"/>
            </security:filter-security-metadata-source>
        </property>
    </bean>

    <!-- ================================================================== -->
    <!--             Authentication Manager                                 -->
    <!-- ================================================================== -->

    <bean id="authenticatedVoterAccessDecisionManager"
          class="org.springframework.security.access.vote.AffirmativeBased">
        <property name="decisionVoters">
            <list>
                <bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>
            </list>
        </property>
    </bean>

    <bean name="authenticationManager" class="org.springframework.security.authentication.ProviderManager">
        <property name="providers">
            <list>
                <ref local="daoAuthenticationProvider"/>
            </list>
        </property>
    </bean>

    <bean id="daoAuthenticationProvider"
          class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
        <property name="userDetailsService" ref="userService"/>
    </bean>

    <!--security:authentication-manager alias="authenticationManager">
        <security:authentication-provider user-service-ref="userService"/>
    </security:authentication-manager-->


    <!-- ================================================================== -->
    <!--             Archetype Service Security                             -->
    <!-- ================================================================== -->

    <!--  Create a proxy for the Security Service bean -->
    <bean id="securityserviceProxyCreator"
          class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="beanNames">
            <list>
                <value>archetypeService</value>
            </list>
        </property>
        <property name="interceptorNames">
            <list>
                <value>securityAdvisor</value>
            </list>
        </property>
    </bean>

    <!--  Configure the security advisor -->
    <bean id="securityAdvisor"
          class="org.openvpms.component.business.service.security.OpenVPMSMethodSecurityInterceptor">
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="accessDecisionManager" ref="accessDecisionManager"/>
        <property name="securityMetadataSource">
            <value>
                org.openvpms.component.business.service.archetype.IArchetypeService.create=archetypeService.create
                org.openvpms.component.business.service.archetype.IArchetypeService.save=archetypeService.save
                org.openvpms.component.business.service.archetype.IArchetypeService.remove=archetypeService.remove
            </value>
        </property>
    </bean>

    <!--  Define the access decision manager for authorization -->
    <bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
        <property name="decisionVoters">
            <list>
                <ref bean="archetypeAwareVoter"/>
            </list>
        </property>
    </bean>

    <!--  Use the standard role vote -->
    <bean id="archetypeAwareVoter" class="org.openvpms.component.business.service.security.ArchetypeAwareVoter"/>


</beans>


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN"
        "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>

    <!-- ================================================================== -->
    <!--                         GENERAL DEFINITIONS                        -->
    <!-- ================================================================== -->

    <!--  Property configuration -->
    <bean id="props"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:hibernate.properties</value>
            </list>
        </property>
    </bean>

    <!-- ================================================================== -->
    <!--                         RESOURCE DEFINITIONS                       -->
    <!-- ================================================================== -->

    <!--  The MySQL DataSource -->
    <bean id="mySQLDataSource"
          class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName"
                  value="${hibernate.connection.driver_class}"/>
        <property name="url" value="${hibernate.connection.url}"/>
        <property name="username"
                  value="${hibernate.connection.username}"/>
        <property name="password"
                  value="${hibernate.connection.password}"/>
    </bean>

    <!--  Entity Interceptor Bean for Hibernate -->
    <bean id="entityInterceptor"
          class="org.openvpms.component.system.service.hibernate.EntityInterceptor">
    </bean>

    <!--  Hibernate session factory -->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <property name="dataSource">
            <ref local="mySQLDataSource"/>
        </property>
        <property name="entityInterceptor">
            <ref local="entityInterceptor"/>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">
                    ${hibernate.dialect}
                </prop>
                <prop key="hibernate.show_sql">
                    ${hibernate.show_sql}
                </prop>
                <prop key="hibernate.max_fetch_depth">
                    ${hibernate.max_fetch_depth}
                </prop>
                <prop key="hibernate.c3p0.min_size">
                    ${hibernate.c3p0.min_size}
                </prop>
                <prop key="hibernate.c3p0.max_size">
                    ${hibernate.c3p0.max_size}
                </prop>
                <prop key="hibernate.c3p0.timeout">
                    ${hibernate.c3p0.timeout}
                </prop>
                <prop key="hibernate.c3p0.max_statements">
                    ${hibernate.c3p0.max_statements}
                </prop>
                <prop key="hibernate.cache.provider_class">
                    ${hibernate.cache.provider_class}</prop>
                <prop key="hibernate.cache.use_second_level_cache">
                    ${hibernate.cache.use_second_level_cache}</prop>
                <prop key="hibernate.cache.use_query_cache">
                    ${hibernate.cache.use_query_cache}</prop>
                <prop key="hibernate.jdbc.use_scrollable_resultset">true</prop>
                <prop key="hibernate.jdbc.batch_size">
                    ${hibernate.jdbc.batch_size}</prop>
                <prop key="hibernate.c3p0.max_statements">
                    ${hibernate.c3p0.max_statements}
                </prop>
            </props>
        </property>
        <property name="mappingResources">
            <list>
                <value>
                    /org/openvpms/component/business/domain/im/lookup/Lookup.hbm.xml
                </value>
                <value>
                    /org/openvpms/component/business/domain/im/lookup/LookupRelationship.hbm.xml
                </value>
                <value>
                    /org/openvpms/component/business/domain/im/act/Act.hbm.xml
                </value>
                <value>
                    /org/openvpms/component/business/domain/im/act/ActRelationship.hbm.xml
                </value>
                <value>
                    /org/openvpms/component/business/domain/im/common/Classification.hbm.xml
                </value>
                <value>
                    /org/openvpms/component/business/domain/im/document/Document.hbm.xml
                </value>
                <value>
                    /org/openvpms/component/business/domain/im/common/Entity.hbm.xml
                </value>
                <value>
                    /org/openvpms/component/business/domain/im/common/EntityIdentity.hbm.xml
                </value>
                <value>
                    /org/openvpms/component/business/domain/im/common/EntityRelationship.hbm.xml
                </value>
                <value>
                    /org/openvpms/component/business/domain/im/common/Participation.hbm.xml
                </value>
                <value>
                    /org/openvpms/component/business/domain/im/party/Contact.hbm.xml
                </value>
                <value>
                    /org/openvpms/component/business/domain/im/product/ProductPrice.hbm.xml
                </value>
                <value>
                    /org/openvpms/component/business/domain/im/archetype/descriptor/ArchetypeDescriptor.hbm.xml
                </value>
                <value>
                    /org/openvpms/component/business/domain/im/archetype/descriptor/AssertionDescriptor.hbm.xml
                </value>
                <value>
                    /org/openvpms/component/business/domain/im/archetype/descriptor/AssertionTypeDescriptor.hbm.xml
                </value>
                <value>
                    /org/openvpms/component/business/domain/im/archetype/descriptor/NodeDescriptor.hbm.xml
                </value>
                <value>
                    /org/openvpms/component/business/domain/im/archetype/descriptor/ActionTypeDescriptor.hbm.xml
                </value>
                <value>
                    /org/openvpms/component/business/domain/im/security/SecurityRole.hbm.xml
                </value>
                <value>
                    /org/openvpms/component/business/domain/im/security/ArchetypeAwareGrantedAuthority.hbm.xml
                </value>
                <value>
                    /org/openvpms/component/business/domain/im/audit/AuditRecord.hbm.xml
                </value>
                <value>
                    /org/openvpms/archetype/rules/patient/reminder/Reminder.hbm.xml
                </value>
            </list>
        </property>
    </bean>

    <!-- ================================================================== -->
    <!--                           DAO DEFINITIONS                        = -->
    <!-- ================================================================== -->

    <!--  The IMObject DAO bean -->
    <bean id="imObjectDao"
          class="org.openvpms.component.business.dao.hibernate.im.entity.IMObjectDAOHibernate">
        <property name="sessionFactory">
            <ref local="sessionFactory"/>
        </property>
    </bean>

    <!--  The AuditRecord DAO bean -->
    <bean id="auditDao"
          class="org.openvpms.component.business.dao.hibernate.im.audit.AuditDAOHibernate">
        <property name="sessionFactory">
            <ref local="sessionFactory"/>
        </property>
    </bean>

    <!-- ================================================================== -->
    <!--                      BUSINESS SERVICE BEANS                        -->
    <!-- ================================================================== -->

    <!--  The Archetype Descriptor Cache -->
    <bean id="archetypeDescriptorCache"
          class="org.openvpms.component.business.service.archetype.descriptor.cache.ArchetypeDescriptorCacheDB">
        <constructor-arg index="0" ref="imObjectDao"/>
    </bean>

    <!--  The Archetype Service -->
    <bean id="archetypeService"
          class="org.openvpms.component.business.service.archetype.ArchetypeService">
        <constructor-arg index="0">
            <ref local="archetypeDescriptorCache"/>
        </constructor-arg>
        <property name="dao">
            <ref local="imObjectDao"/>
        </property>
        <property name="entityInterceptor">
            <ref local="entityInterceptor"/>
        </property>
    </bean>

    <!--  The Audit Service -->
    <bean id="auditService"
          class="org.openvpms.component.business.service.audit.AuditService">
        <constructor-arg index="0">
            <ref local="auditDao"/>
        </constructor-arg>
    </bean>

    <!-- The User Details service -->
    <bean id="hibernateUserDetailsService"
          class="org.openvpms.component.business.service.security.hibernate.HibernateUserDetailsService">
        <constructor-arg index="0">
            <ref local="imObjectDao"/>
        </constructor-arg>
    </bean>


    <!-- ================================================================== -->
    <!--                         ARCHETYPE SUPPORT                          -->
    <!-- ================================================================== -->

    <bean id="archetypeServiceHelper"
          class="org.openvpms.component.business.service.archetype.ArchetypeServiceHelper">
        <constructor-arg index="0">
            <ref local="archetypeService"/>
        </constructor-arg>
    </bean>

    <!-- The JXPathHelper class, used to register extension functions -->
    <bean id="jxpathHelper"
          class="org.openvpms.component.system.common.jxpath.JXPathHelper">
        <constructor-arg index="0">
            <props>
                <prop key="openvpms">
                    org.openvpms.component.business.service.archetype.ArchetypeServiceFunctions</prop>
                <prop key="party">
                    org.openvpms.archetype.function.party.PartyFunctions</prop>
                <prop key="lookup">
                    org.openvpms.archetype.function.lookup.LookupFunctions</prop>
                <prop key="date">
                    org.openvpms.component.system.common.jxpath.DateFunctions</prop>
            </props>
        </constructor-arg>
    </bean>

    <!-- ================================================================== -->
    <!--                 RULES DEFINITIONS (DROOLS)                         -->
    <!-- ================================================================== -->

    <!-- The `local' ruleServiceProvider; we can have as many different ruleProviders as we want -->
    <bean id="ruleServiceProvider"
          class="org.springmodules.jsr94.factory.DefaultRuleServiceProviderFactoryBean">
        <property name="provider">
            <value>http://drools.org</value>
        </property>
        <property name="providerClass">
            <value>org.drools.jsr94.rules.RuleServiceProviderImpl</value>
        </property>
    </bean>

    <!-- The local ruleRuntime. Usually, there is one ruleRuntime bean for each ruleServiceProvider bean. -->
    <bean id="ruleRuntime"
          class="org.springmodules.jsr94.factory.RuleRuntimeFactoryBean">
        <property name="serviceProvider">
            <ref local="ruleServiceProvider"/>
        </property>
    </bean>

    <!-- the local ruleAdministrator. Usually, there is one ruleAdministrator bean for each ruleServiceProvider bean -->
    <bean id="ruleAdministrator"
          class="org.springmodules.jsr94.factory.RuleAdministratorFactoryBean">
        <property name="serviceProvider">
            <ref local="ruleServiceProvider"/>
        </property>
    </bean>

    <!-- the ruleSource. There can be many ruleSource beans for each ruleAdministrator/ruleRuntime. -->
    <bean id="ruleSource"
          class="org.openvpms.component.business.service.ruleengine.RuleDescriptorRuleSource">
        <property name="ruleRuntime">
            <ref local="ruleRuntime"/>
        </property>
        <property name="ruleAdministrator">
            <ref local="ruleAdministrator"/>
        </property>
    </bean>

    <!-- Jsr94Template -->
    <bean id="jsr94Template" class="org.springmodules.jsr94.core.Jsr94Template">
        <property name="ruleSource">
            <ref local="ruleSource"/>
        </property>
    </bean>

    <!--  The DroolsRileEngine interceptor -->
    <bean id="ruleEngine"
          class="org.openvpms.component.business.service.ruleengine.DroolsRuleEngine">
        <constructor-arg index="0">
            <ref local="ruleSource"/>
        </constructor-arg>
        <property name="template">
            <ref local="jsr94Template"/>
        </property>
    </bean>

    <!--  Create a proxy for the ArchetypeService bean -->
    <bean id="ruleEngineProxyCreator"
          class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="beanNames">
            <list>
                <idref local="archetypeService"/>
            </list>
        </property>
        <property name="interceptorNames">
            <list>
                <value>ruleEngineAdvisor</value>
            </list>
        </property>
    </bean>

    <!-- The advisor  -->
    <bean id="ruleEngineAdvisor"
          class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
        <property name="advice">
            <ref local="ruleEngine"/>
        </property>
        <property name="patterns">
            <list>
                <value>.*save</value>
                <value>.*remove</value>
            </list>
        </property>
    </bean>

    <!-- ================================================================== -->
    <!--                      AUDIT DEFINITIONS                           = -->
    <!-- ================================================================== -->

    <!--  Create a proxy for the ArchetypeService bean -->
    <bean id="autoProxyCreator"
          class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="beanNames">
            <list>
                <value>archetypeService</value>
            </list>
        </property>
        <property name="interceptorNames">
            <list>
                <value>auditServiceAdvisor</value>
            </list>
        </property>
    </bean>

    <!-- The audit service advisor -->
    <bean id="auditServiceAdvisor"
          class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
        <property name="advice">
            <ref local="auditService"/>
        </property>
        <property name="patterns">
            <list>
                <value>.*ArchetypeService\.save</value>
                <value>.*ArchetypeService\.remove</value>
            </list>
        </property>
    </bean>

    <!-- ================================================================== -->
    <!--             SECURITY DEFINITIONS (ACEGI SECURITY)                  -->
    <!-- ================================================================== -->

    <!--  Create a proxy for the Security Service bean -->
    <bean id="securityserviceProxyCreator"
          class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="beanNames">
            <list>
                <value>archetypeService</value>
            </list>
        </property>
        <property name="interceptorNames">
            <list>
                <value>securityAdvisor</value>
            </list>
        </property>
    </bean>

    <!--  Configure the security advisor -->
    <bean id='securityAdvisor'
          class='org.openvpms.component.business.service.security.OpenVPMSMethodSecurityInterceptor'>
        <property name='authenticationManager' ref='authenticationManager'/>
        <property name='accessDecisionManager' ref='accessDecisionManager'/>
        <property name='objectDefinitionSource'>
            <value>
                org.openvpms.component.business.service.archetype.IArchetypeService.save=archetypeService.save
                org.openvpms.component.business.service.archetype.IArchetypeService.remove=archetypeService.remove
            </value>
        </property>
    </bean>

    <!--  Define thew access decision manager for authorization -->
    <bean id='accessDecisionManager'
          class='org.acegisecurity.vote.AffirmativeBased'>
        <property name='decisionVoters'>
            <list>
                <ref bean='archetypeAwareVoter'/>
            </list>
        </property>
    </bean>

    <!--  Use the standard role vote -->
    <bean id='archetypeAwareVoter'
          class='org.openvpms.component.business.service.security.ArchetypeAwareVoter'/>

    <!-- ================================================================== -->
    <!--                        REPORTING                                   -->
    <!-- ================================================================== -->

    <!-- OpenOffice service. This can be configured to use the BootStrapService
         to start a local OpenOffice server, or connect to an existing
         OpenOffice server.
         To connect to an existing server listening on a socket, use the
         following, replacing host and port as required:
        <constructor-arg>
            <value>socket,host=localhost,port=8100,tcpNoDelay=1</value>
        </constructor-arg>
        The corresponding server should be run with the following:
            soffice -nologo -nodefault -norestore -nocrashreport -nolockcheck -accept=socket,port=8100;urp;

        To connect to an existing server listening on pipe (changing the pipe
        name as required):
        <constructor-arg>
            <value>pipe,name=vpms</value>
        </constructor-arg>
        The corresponding server should be run with the following:
            soffice -nologo -nodefault -norestore -nocrashreport -nolockcheck -accept=pipe,name=vpms;urp;
    -->
    <bean id="openOfficeService"
          class="org.openvpms.report.openoffice.OpenOfficeService">
        <constructor-arg>
            <value>socket,host=localhost,port=8100,tcpNoDelay=1</value>
        </constructor-arg>
    </bean>

    <bean id="printService"
          class="org.openvpms.report.openoffice.PrintService">
        <constructor-arg>
            <ref local="openOfficeService"/>
        </constructor-arg>
    </bean>

    <bean id="openOfficeHelper"
          class="org.openvpms.report.openoffice.OpenOfficeHelper">
        <constructor-arg>
            <ref local="openOfficeService"/>
        </constructor-arg>
        <constructor-arg>
            <ref local="printService"/>
        </constructor-arg>
    </bean>

    <!-- ================================================================== -->
    <!--                        APPLICATION                                 -->
    <!-- ================================================================== -->
    <bean id="loginApp" class="org.openvpms.web.app.login.LoginApp"
          singleton="false"/>

    <bean id="openVPMSApp" class="org.openvpms.web.app.OpenVPMSApp"
          singleton="false"/>

</beans>

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- ================================================================== -->
    <!--                         GENERAL DEFINITIONS                        -->
    <!-- ================================================================== -->

    <bean id="properties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">

        <property name="ignoreResourceNotFound" value="true"/>

        <!-- Note: Properties defined in later files will override          -->
        <!-- properties defined earlier files, in case of overlapping keys. -->
        <!-- Hence, make sure that the most specific files are the last     -->
        <!-- ones in the given list of locations.                           -->
        <property name="locations">
            <list>
                <value>classpath:default-openvpms.properties</value>
                <value>classpath:hibernate.properties</value>
            </list>
        </property>
    </bean>

    <bean id="propertyPlaceholderConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="properties" ref="properties"/>

        <!-- allow system properties to override any other property source -->
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
    </bean>

    <!-- ================================================================== -->
    <!--                         RESOURCE DEFINITIONS                       -->
    <!-- ================================================================== -->

    <!--  The DataSource -->
    <bean id="dataSource"
          class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName"
                  value="${hibernate.connection.driver_class}"/>
        <property name="url" value="${hibernate.connection.url}"/>
        <property name="username"
                  value="${hibernate.connection.username}"/>
        <property name="password"
                  value="${hibernate.connection.password}"/>
    </bean>

    <!--  Hibernate session factory -->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">
                    ${hibernate.dialect}
                </prop>
                <prop key="hibernate.show_sql">
                    ${hibernate.show_sql}
                </prop>
                <prop key="hibernate.max_fetch_depth">
                    ${hibernate.max_fetch_depth}
                </prop>
                <prop key="hibernate.c3p0.min_size">
                    ${hibernate.c3p0.min_size}
                </prop>
                <prop key="hibernate.c3p0.max_size">
                    ${hibernate.c3p0.max_size}
                </prop>
                <prop key="hibernate.c3p0.timeout">
                    ${hibernate.c3p0.timeout}
                </prop>
                <prop key="hibernate.c3p0.max_statements">
                    ${hibernate.c3p0.max_statements}
                </prop>
                <prop key="hibernate.cache.provider_class">
                    ${hibernate.cache.provider_class}
                </prop>
                <prop key="hibernate.cache.use_second_level_cache">
                    ${hibernate.cache.use_second_level_cache}
                </prop>
                <prop key="hibernate.cache.use_query_cache">
                    ${hibernate.cache.use_query_cache}
                </prop>
                <prop key="hibernate.jdbc.use_scrollable_resultset">true</prop>
                <prop key="hibernate.jdbc.batch_size">
                    ${hibernate.jdbc.batch_size}
                </prop>
                <prop key="hibernate.c3p0.max_statements">
                    ${hibernate.c3p0.max_statements}
                </prop>
                <prop key="net.sf.ehcache.configurationResourceName">/ehcache.xml</prop>
                <prop key="hibernate.generate_statistics">true</prop>
            </props>
        </property>
        <property name="schemaUpdate" value="false"/>
        <property name="mappingLocations">
            <list>
                <value>classpath:org/openvpms/component/business/dao/**/*.hbm.xml</value>
                <value>classpath:org/openvpms/archetype/rules/**/*.hbm.xml</value>
            </list>
        </property>
    </bean>

    <!--  Transaction manager -->
    <bean id="txnManager"
          class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- ================================================================== -->
    <!--                           DAO DEFINITIONS                        = -->
    <!-- ================================================================== -->


    <!--  The IMObject DAO bean -->
    <bean id="imObjectDao"
          class="org.openvpms.component.business.dao.hibernate.im.IMObjectDAOHibernate">
        <property name="sessionFactory" ref="sessionFactory"/>
        <property name="transactionManager" ref="txnManager"/>
    </bean>

    <!--  The AuditRecord DAO bean -->
    <bean id="auditDao"
          class="org.openvpms.component.business.dao.hibernate.im.audit.AuditDAOHibernate">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- ================================================================== -->
    <!--                           CACHE MANAGER                            -->
    <!-- ================================================================== -->

    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <!-- NOTE: the configLocation must be the same as that specified by the sessionFactory
             property: net.sf.ehcache.configurationResourceName, when SingletonEhCacheProvider is being used -->
        <property name="configLocation" value="classpath:ehcache.xml"/>
        <property name="shared" value="true"/>
    </bean>

    <!-- ================================================================== -->
    <!--                           JMX                                      -->
    <!-- ================================================================== -->

    <!--
    <bean id="hibernateStatisticsMBean" class="org.hibernate.jmx.StatisticsService" lazy-init="false">
        <property name="statisticsEnabled" value="true"/>
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean id="ehCacheMBeanRegistration" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean" lazy-init="false">
        <property name="staticMethod" value="net.sf.ehcache.management.ManagementService.registerMBeans"/>
        <property name="arguments">
            <list>
                <ref bean="cacheManager"/>
                <ref bean="mbeanServer"/>
                <value>true</value>
                <value>true</value>
                <value>true</value>
                <value>true</value>
            </list>
        </property>
    </bean>

    <bean id="mbeanServer" class="org.springframework.jmx.support.MBeanServerFactoryBean" lazy-init="false">
        <property name="locateExistingServerIfPossible" value="true"/>
    </bean>

    <bean id="mbeanExporter" class="org.springframework.jmx.export.MBeanExporter" lazy-init="false">
        <property name="beans">
            <map>
                <entry key="Hibernate:name=statistics" value-ref="hibernateStatisticsMBean"/>
            </map>
        </property>
        <property name="server" ref="mbeanServer"/>
    </bean>
    -->

    <!-- ================================================================== -->
    <!--                      BUSINESS SERVICE BEANS                        -->
    <!-- ================================================================== -->

    <!--  The Archetype Descriptor Cache -->
    <bean id="archetypeDescriptorCache"
          class="org.openvpms.component.business.service.archetype.descriptor.cache.ArchetypeDescriptorCacheDB">
        <constructor-arg ref="imObjectDao"/>
    </bean>

    <!--  The Archetype Rule service -->
    <bean id="archetypeRuleService"
          class="org.openvpms.component.business.service.archetype.rule.ArchetypeRuleService">
        <constructor-arg ref="archetypeService"/>
        <constructor-arg ref="ruleEngine"/>
        <constructor-arg ref="txnManager"/>
        <property name="facts">
            <!-- make currencies available to rules -->
            <list>
                <ref bean="currencies"/>
                <ref bean="lookupService"/>
            </list>
        </property>
    </bean>

    <!-- The Archetype service -->
    <bean id="archetypeService"
          class="org.openvpms.component.business.service.archetype.ArchetypeService" autowire-candidate="false">
        <!-- don't make this a candidate for autowiring as it doesn't support rules -->
        <constructor-arg ref="archetypeDescriptorCache"/>
        <property name="dao" ref="imObjectDao"/>
        <property name="ruleEngine" ref="ruleEngine"/>
    </bean>

    <!--  The Audit Service -->
    <bean id="auditService"
          class="org.openvpms.component.business.service.audit.AuditService">
        <constructor-arg ref="auditDao"/>
    </bean>

    <!-- ================================================================== -->
    <!--                         ARCHETYPE SUPPORT                          -->
    <!-- ================================================================== -->

    <bean id="archetypeServiceHelper"
          class="org.openvpms.component.business.service.archetype.ArchetypeServiceHelper">
        <constructor-arg ref="archetypeRuleService"/>
    </bean>

    <bean name="imObjectBeanFactory"
          class="org.openvpms.component.business.service.archetype.helper.IMObjectBeanFactory">
        <constructor-arg index="0" ref="archetypeRuleService"/>
    </bean>

    <!-- The JXPathHelper class, used to register extension functions -->
    <bean id="jxpathHelper"
          class="org.openvpms.component.system.common.jxpath.JXPathHelper">
        <constructor-arg>
            <map>
                <entry key="openvpms"
                       value="org.openvpms.component.business.service.archetype.ArchetypeServiceFunctions"/>
                <entry key="lookup"
                       value="org.openvpms.archetype.function.lookup.LookupFunctions"/>
                <entry key="party">
                    <bean class="org.openvpms.archetype.function.party.PartyFunctions">
                        <constructor-arg ref="archetypeRuleService"/>
                        <constructor-arg ref="patientRules"/>
                    </bean>
                </entry>
                <entry key="reminder">
                    <bean class="org.openvpms.archetype.function.reminder.ReminderFunctions">
                        <constructor-arg index="0" ref="archetypeService"/>
                        <constructor-arg index="1" ref="reminderRules"/>
                        <constructor-arg index="2" ref="customerRules"/>
                    </bean>
                </entry>
                <entry key="date"
                       value="org.openvpms.component.system.common.jxpath.DateFunctions"/>
                <entry key="math">
                    <bean class="org.openvpms.archetype.function.math.MathFunctions"/>
                </entry>
                <entry key="word"
                       value="org.apache.commons.lang.WordUtils"/>
                <entry key="macro">
                    <bean class="org.openvpms.macro.impl.MacroFunctions">
                        <constructor-arg ref="macros"/>
                    </bean>
                </entry>
            </map>
        </constructor-arg>
    </bean>

    <!-- ================================================================== -->
    <!--                         LOOKUP SERVICE                             -->
    <!-- ================================================================== -->

    <bean id="lookupService"
          class="org.openvpms.component.business.service.lookup.CachingLookupService">
        <constructor-arg index="0" ref="archetypeRuleService"/>
        <constructor-arg index="1">
            <ref local="imObjectDao"/>
        </constructor-arg>
        <constructor-arg index="2">
            <bean class="org.springframework.cache.ehcache.EhCacheFactoryBean">
                <property name="diskPersistent" value="false"/>
                <property name="cacheName" value="lookupCache"/>
                <property name="maxElementsInMemory" value="40000"/>
                <property name="overflowToDisk" value="false"/>
                <property name="eternal" value="true"/>
            </bean>
        </constructor-arg>
        <property name="cached">
            <list>
                <value>lookup.state</value>
                <value>lookup.suburb</value>
            </list>
        </property>
    </bean>

    <bean id="lookupServiceHelper"
          class="org.openvpms.component.business.service.lookup.LookupServiceHelper">
        <constructor-arg ref="lookupService"/>
    </bean>


    <!-- ================================================================== -->
    <!--                 RULES ENGINE (DROOLS)                              -->
    <!-- ================================================================== -->

    <!-- The local ruleServiceProvider. We can have as many different ruleProviders as we want -->
    <bean id="ruleServiceProvider"
          class="org.springmodules.jsr94.factory.DefaultRuleServiceProviderFactoryBean">
        <property name="provider" value="http://drools.org"/>
        <property name="providerClass"
                  value="org.drools.jsr94.rules.RuleServiceProviderImpl"/>
    </bean>

    <!-- The local ruleRuntime. Usually, there is one ruleRuntime bean for each ruleServiceProvider bean. -->
    <bean id="ruleRuntime"
          class="org.springmodules.jsr94.factory.RuleRuntimeFactoryBean">
        <property name="serviceProvider" ref="ruleServiceProvider"/>
    </bean>

    <!-- the local ruleAdministrator. Usually, there is one ruleAdministrator bean for each ruleServiceProvider bean -->
    <bean id="ruleAdministrator"
          class="org.springmodules.jsr94.factory.RuleAdministratorFactoryBean">
        <property name="serviceProvider" ref="ruleServiceProvider"/>
    </bean>

    <!-- the ruleSource. There can be many ruleSource beans for each ruleAdministrator/ruleRuntime. -->
    <bean id="ruleSource"
          class="org.openvpms.component.business.service.ruleengine.RuleDescriptorRuleSource">
        <property name="ruleRuntime" ref="ruleRuntime"/>
        <property name="ruleAdministrator" ref="ruleAdministrator"/>
    </bean>

    <!--  The Rule engine -->
    <bean id="ruleEngine"
          class="org.openvpms.component.business.service.ruleengine.RuleEngine">
        <constructor-arg ref="ruleSource"/>
    </bean>

    <!-- ================================================================== -->
    <!--                      AUDIT DEFINITIONS                           = -->
    <!-- ================================================================== -->

    <!--  Create a proxy for the ArchetypeService bean -->
    <bean id="autoProxyCreator"
          class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="beanNames">
            <list>
                <value>archetypeService</value>
            </list>
        </property>
        <property name="interceptorNames">
            <list>
                <value>auditServiceAdvisor</value>
            </list>
        </property>
    </bean>

    <!-- The audit service advisor -->
    <bean id="auditServiceAdvisor"
          class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
        <property name="advice" ref="auditService"/>
        <property name="patterns">
            <list>
                <value>.*ArchetypeService\.save</value>
                <value>.*ArchetypeService\.remove</value>
            </list>
        </property>
    </bean>

    <!-- ================================================================== -->
    <!-- Scheduling                                                         -->
    <!-- ================================================================== -->

    <bean id="jobScheduler" class="org.openvpms.component.business.service.scheduler.JobScheduler">
        <constructor-arg ref="scheduler"/>
        <constructor-arg ref="archetypeRuleService"/>
    </bean>

    <bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="jobFactory">
            <bean class="org.springframework.scheduling.quartz.SpringBeanJobFactory"/>
        </property>
        <property name="quartzProperties">
            <props>
                <prop key="org.quartz.plugin.jobHistory.class">org.quartz.plugins.history.LoggingJobHistoryPlugin</prop>
            </props>
        </property>
    </bean>


    <!-- ================================================================== -->
    <!--                        PROPER CASING                               -->
    <!-- ================================================================== -->

    <bean id="properCaseConverter"
          class="org.openvpms.component.business.service.archetype.assertion.ProperCaseNameConverter">
        <constructor-arg>
            <bean class="org.openvpms.component.business.service.archetype.assertion.LocaleProperCaseRules">
                <constructor-arg value="org.openvpms.web.resource.localisation.propercase"/>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="properCaseConverterHelper"
          class="org.openvpms.component.business.service.archetype.assertion.ProperCaseConverterHelper">
        <constructor-arg ref="properCaseConverter"/>
    </bean>


</beans>
/*
 * Version: 1.0
 *
 * The contents of this file are subject to the OpenVPMS License Version
 * 1.0 (the 'License'); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.openvpms.org/license/
 *
 * Software distributed under the License is distributed on an 'AS IS' basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * Copyright 2015 (C) OpenVPMS Ltd. All Rights Reserved.
 */

package org.openvpms.web.component.im.mail;

import org.openvpms.component.business.domain.im.document.Document;
import org.openvpms.web.component.im.report.Reporter;
import org.openvpms.web.component.mail.AbstractMailer;
import org.openvpms.web.component.mail.Mailer;
import org.openvpms.web.system.ServiceHelper;
import org.springframework.mail.javamail.MimeMessageHelper;

import javax.mail.MessagingException;
import java.io.UnsupportedEncodingException;


/**
 * Abstract implementation of the {@link Mailer} interface that supports attachments generated by an {@link Reporter} .
 *
 * @author Tim Anderson
 */
public abstract class ReportMailer<T> extends AbstractMailer {

    /**
     * The reporter.
     */
    private final Reporter<T> reporter;

    /**
     * Constructs a {@link ReportMailer}.
     *
     * @param reporter reporter
     */
    public ReportMailer(Reporter<T> reporter) {
        super(ServiceHelper.getMailSender(), ServiceHelper.getDocumentHandlers());
        this.reporter = reporter;
    }

    /**
     * Populates the mail message.
     *
     * @param helper the message helper
     * @throws MessagingException           for any messaging error
     * @throws UnsupportedEncodingException if the character encoding is not supported
     */
    @Override
    protected void populateMessage(MimeMessageHelper helper)
            throws MessagingException, UnsupportedEncodingException {
        super.populateMessage(helper);

        final Document doc = reporter.getDocument(Reporter.DEFAULT_MIME_TYPE, true);
        addAttachment(helper, doc);
    }

    /**
     * Returns the reporter.
     *
     * @return the reporter
     */
    protected Reporter<T> getReporter() {
        return reporter;
    }

}
